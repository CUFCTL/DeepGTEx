manifest {
    mainScript = "main.nf"
    defaultBranch = "master"
    nextflowVersion = ">=20.07"
}



params {
    conda_env = "gene-oracle"
    chunks = 10

    input {
        dir = "input"
        data_txt = "*.emx.txt"
        data_npy = "*.emx.npy"
        rownames = "*.emx.rownames.txt"
        colnames = "*.emx.colnames.txt"
        labels = "*.labels.txt"
        gmt_files = "*.genesets.txt"
    }

    output {
        dir = "output"
    }

    phase1 {
        enabled = true
        model = "lr"
        random_min = 1
        random_max = 20
        random_iters = 10
        threshold = 1
        n_sets = 5
    }

    phase2 {
        enabled = false
        model = "lr"
        threshold = 75
        visualize = true
    }

    phase2_rf {
        enabled = true
        threshold = 75
        visualize = true
    }
}



report {
    enabled = true
    file = "${params.output.dir}/reports/report.html"
}



timeline {
    enabled = true
    file = "${params.output.dir}/reports/timeline.html"
}



trace {
    enabled = true
    fields = "task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes,vol_ctxt,inv_ctxt,workdir,scratch,error_action"
    file = "${params.output.dir}/reports/trace.txt"
    raw = true
}



docker {
    sudo = false
    runOptions = "--init --gpus all"
}



singularity {
    runOptions = "--nv"
    autoMounts = true
    cacheDir = "work-singularity"
}



process {
    beforeScript = "source activate ${params.conda_env}"
}



profiles {
    k8s {
        process {
            beforeScript = ""
            container = "systemsgenetics/gene-oracle"
        }
    }

    pbs {
        process {
            executor = "pbspro"
            time = "24h"
            clusterOptions = "-l select=1:ncpus=1:mem=8gb"

            withLabel:gpu {
                clusterOptions = "-l select=1:ncpus=1:mem=8gb:ngpus=1:gpu_model=p100:interconnect=fdr"
            }
        }
        executor {
            queueSize = 50
        }
    }

    standard {
        process.executor = "local"
    }

    testing {
        process.errorStrategy = "terminate"
    }
}
